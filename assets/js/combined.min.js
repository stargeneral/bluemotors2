/* Blue Motors Southampton - Combined JavaScript for Performance */
/* Generated: 2025-08-21 16:24:17 */

/* === booking.js === */
jQuery(document).ready(function ($) { let bookingData = { service: null, vehicle: {}, appointment: {}, customer: {}, price: 0 }; let currentStep = 1; let stripe = null; let elements = null; let cardElement = null; if (typeof bms_ajax !== 'undefined' && bms_ajax.stripe_publishable_key) { stripe = Stripe(bms_ajax.stripe_publishable_key); elements = stripe.elements(); } $('#btn-lookup-vehicle').on('click', function (e) { e.preventDefault(); const registration = $('#vehicle-reg').val().replace(/\s/g, '').toUpperCase(); if (!registration || registration.length < 5) { showMessage('Please enter a valid registration number', 'error'); return; } $('#lookup-status').html('<div class="loading">Looking up vehicle...</div>'); $(this).prop('disabled', true); $.ajax({ url: bms_ajax.ajax_url, type: 'POST', data: { action: 'bms_vehicle_lookup', registration: registration, service_type: bookingData.service, nonce: bms_ajax.nonce }, success: function (response) { if (response.success) { bookingData.vehicle = response.data; bookingData.price = response.data.calculated_price; displayVehicleDetails(response.data); $('#lookup-status').empty(); $('#vehicle-details-display').slideDown(); } else { showMessage('Vehicle not found. Please check the registration or enter details manually.', 'error'); } }, error: function () { showMessage('An error occurred. Please try again or enter details manually.', 'error'); }, complete: function () { $('#btn-lookup-vehicle').prop('disabled', false); } }); }); function moveToStep(stepNumber) { $('.bms-step-content').hide(); $('#step-' + stepNumber + '-content').fadeIn(); $('.step').removeClass('active completed'); for (let i = 1; i < stepNumber; i++) { $('.step[data-step="' + i + '"]').addClass('completed'); } $('.step[data-step="' + stepNumber + '"]').addClass('active'); currentStep = stepNumber; $('html, body').animate({ scrollTop: $('.bms-booking-container').offset().top - 100 }, 500); switch (stepNumber) { case 1: $('.continue-section').remove(); break; case 2: $('#vehicle-reg').focus(); if (!bookingData.service) { moveToStep(1); showMessage('Please select a service first', 'error'); return; } break; case 3: if (!bookingData.service) { moveToStep(1); showMessage('Please select a service first', 'error'); return; } break; case 4: $('#customer-name').focus(); break; case 5: updateBookingSummary(); initializePayment(); break; } } function displayVehicleDetails(vehicleData) { $('#display-make').text(vehicleData.make || 'N/A'); $('#display-model').text(vehicleData.model || 'N/A'); $('#display-year').text(vehicleData.year || 'N/A'); $('#display-engine').text(vehicleData.engineCapacity || 'N/A'); $('#display-fuel').text(vehicleData.fuelType || 'N/A'); $('#service-price').text((vehicleData.calculated_price || 0).toFixed(2)); bookingData.vehicle = vehicleData; bookingData.price = vehicleData.calculated_price || 0; if (vehicleData.is_combo) { bookingData.motIncluded = true; bookingData.service = vehicleData.service_type; } if (typeof window.updateServicePricing === 'function') { window.updateServicePricing(vehicleData); } } function showMessage(message, type = 'info') { $('.bms-message').remove(); const messageHtml = ` <div class="bms-message bms-message-${type}"> ${message} <button type="button" class="message-close">&times;</button> </div> `; $('.bms-booking-container').prepend(messageHtml); setTimeout(() => { $('.bms-message').fadeOut(); }, 5000); $('.message-close').on('click', function () { $(this).parent().fadeOut(); }); } function updateBookingSummary() { let summaryHtml = '<div class="summary-section">'; if (bookingData.service) { summaryHtml += ` <div class="summary-item"> <strong>Service:</strong> ${getServiceName(bookingData.service)} <span class="summary-price">£${bookingData.price.toFixed(2)}</span> </div> `; } if (bookingData.vehicle.make) { summaryHtml += ` <div class="summary-item"> <strong>Vehicle:</strong> ${bookingData.vehicle.make} ${bookingData.vehicle.model} <span class="summary-detail">${bookingData.vehicle.registration || ''}</span> </div> `; } if (bookingData.appointment.date) { summaryHtml += ` <div class="summary-item"> <strong>Appointment:</strong> ${bookingData.appointment.date} <span class="summary-detail">${bookingData.appointment.time || ''}</span> </div> `; } summaryHtml += '</div>'; $('#booking-summary-details').html(summaryHtml); $('#total-amount').text(bookingData.price.toFixed(2)); } function getServiceName(serviceType) { const names = { 'interim_service': 'Interim Service', 'full_service': 'Full Service', 'mot_test': 'MOT Test' }; return names[serviceType] || serviceType; } function initializePayment() { if (stripe && elements) { console.log('Payment system ready'); } } window.moveToStep = moveToStep; window.bookingData = bookingData; $('#btn-continue-to-date').on('click', function () { moveToStep(3); }); $('#btn-continue-to-details').on('click', function () { moveToStep(4); }); $('#btn-continue-to-payment').on('click', function () { moveToStep(5); }); });;

/* === tyre-booking.js === */
class BlueMotosTyreBooking { constructor() { this.selectedTyre = null; this.selectedQuantity = 1; this.availableTyres = []; this.vehicleData = null; this.currentStep = 'search'; this.init(); } init() { this.bindEvents(); this.setupDateLimits(); console.log('🛞 Blue Motors Tyre System Initialized - Beat industry leaders!'); } bindEvents() { document.querySelectorAll('[data-method]').forEach(btn => { btn.addEventListener('click', (e) => { this.switchSearchMethod(e.target.dataset.method); }); }); const regButton = document.getElementById('btn-search-tyres-by-reg'); if (regButton) { regButton.addEventListener('click', () => this.searchByRegistration()); } const regInput = document.getElementById('bms-vehicle-reg'); if (regInput) { regInput.addEventListener('keypress', (e) => { if (e.key === 'Enter') { this.searchByRegistration(); } }); regInput.addEventListener('input', (e) => { e.target.value = e.target.value.toUpperCase().replace(/[^A-Z0-9]/g, ''); }); } const sizeButton = document.getElementById('btn-search-tyres-by-size'); if (sizeButton) { sizeButton.addEventListener('click', () => this.searchBySize()); } document.querySelectorAll('.size-button').forEach(btn => { btn.addEventListener('click', (e) => { this.searchByPopularSize(e.target.dataset.size); }); }); document.getElementById('filter-brand-tier')?.addEventListener('change', () => this.applyFilters()); document.getElementById('filter-sort')?.addEventListener('change', () => this.applyFilters()); document.getElementById('filter-season')?.addEventListener('change', () => this.applyFilters()); document.getElementById('fitting-date')?.addEventListener('change', (e) => { this.loadFittingSlots(e.target.value); }); document.getElementById('btn-continue-to-booking')?.addEventListener('click', () => { this.showFittingAppointment(); }); document.getElementById('btn-confirm-booking')?.addEventListener('click', () => { this.confirmBooking(); }); document.getElementById('btn-back-to-selection')?.addEventListener('click', () => { this.backToSelection(); }); } setupDateLimits() { const dateInput = document.getElementById('fitting-date'); if (dateInput) { const today = new Date(); const minDate = new Date(today.getTime() + (2 * 24 * 60 * 60 * 1000)); const maxDate = new Date(today.getTime() + (30 * 24 * 60 * 60 * 1000)); dateInput.min = minDate.toISOString().split('T')[0]; dateInput.max = maxDate.toISOString().split('T')[0]; } } switchSearchMethod(method) { document.querySelectorAll('.search-method').forEach(el => { el.classList.remove('active'); }); document.querySelector(`[data-method="${method}"]`).classList.add('active'); this.hideAllSections(); } async searchByRegistration() { const regInput = document.getElementById('bms-vehicle-reg'); const registration = regInput.value.trim(); if (!registration) { this.showError('Please enter a vehicle registration number'); return; } if (!this.validateUKRegistration(registration)) { this.showError('Please enter a valid UK registration number'); return; } this.showLoading('Looking up your vehicle and finding perfect tyres...'); try { const response = await fetch(bmsVehicleLookup.ajaxUrl, { method: 'POST', headers: { 'Content-Type': 'application/x-www-form-urlencoded', }, body: new URLSearchParams({ action: 'bms_search_tyres_by_reg', nonce: bmsVehicleLookup.nonce, registration: registration }) }); const data = await response.json(); if (data.success) { this.vehicleData = data.data.vehicle; this.displayVehicleAndTyres(data.data); } else { this.showError(data.data || 'Vehicle not found. Please try searching by tyre size instead.'); } } catch (error) { console.error('Search error:', error); this.showError('Network error. Please check your connection and try again.'); } } async searchBySize() { const width = document.getElementById('tyre-width').value; const profile = document.getElementById('tyre-profile').value; const rim = document.getElementById('tyre-rim').value; if (!width || !profile || !rim) { this.showError('Please select all tyre size options'); return; } const size = `${width}/${profile}R${rim}`; await this.performSizeSearch(size); } async searchByPopularSize(size) { await this.performSizeSearch(size); } async performSizeSearch(size) { this.showLoading('Searching for tyres...'); try { const response = await fetch(bmsVehicleLookup.ajaxUrl, { method: 'POST', headers: { 'Content-Type': 'application/x-www-form-urlencoded', }, body: new URLSearchParams({ action: 'bms_search_tyres_by_size', nonce: bmsVehicleLookup.nonce, size: size }) }); const data = await response.json(); if (data.success) { this.availableTyres = data.data; this.displayTyreResults(data.data, `Size: ${size}`); } else { this.showError(data.data || 'No tyres found for this size'); } } catch (error) { console.error('Search error:', error); this.showError('Network error. Please try again.'); } } displayVehicleAndTyres(data) { if (!data.available_tyres || Object.keys(data.available_tyres).length === 0) { this.showError('No tyres found for your vehicle. Please contact us for assistance.'); return; } const vehicleInfo = document.getElementById('vehicle-info-display'); const vehicleDetails = vehicleInfo.querySelector('.vehicle-details'); vehicleDetails.innerHTML = ` <div class="vehicle-summary"> <h5>${data.vehicle.make} ${data.vehicle.model}</h5> <p>Engine: ${data.vehicle.engineCapacity}cc ${data.vehicle.fuelType}</p> <p>Year: ${data.vehicle.yearOfManufacture}</p> </div> `; vehicleInfo.style.display = 'block'; this.availableTyres = []; Object.keys(data.available_tyres).forEach(size => { this.availableTyres = [...this.availableTyres, ...data.available_tyres[size]]; }); this.displayTyreResults(this.availableTyres, 'Recommended for your vehicle'); } displayTyreResults(tyres, context) { this.hideAllSections(); if (!tyres || tyres.length === 0) { this.showNoResults(); return; } document.getElementById('results-title').textContent = `${tyres.length} Tyres Found`; if (context) { document.getElementById('results-title').textContent += ` - ${context}`; } document.getElementById('results-count-text').textContent = `${tyres.length} tyres available`; document.getElementById('tyre-filters').style.display = 'block'; this.renderTyreCards(tyres); document.getElementById('tyre-results').style.display = 'block'; document.getElementById('tyre-results').scrollIntoView({ behavior: 'smooth', block: 'start' }); } renderTyreCards(tyres) { const grid = document.getElementById('tyre-results-grid'); grid.innerHTML = ''; tyres.forEach(tyre => { const card = this.createTyreCard(tyre); grid.appendChild(card); }); } createTyreCard(tyre) { const template = document.getElementById('tyre-card-template'); const card = template.content.cloneNode(true); card.querySelector('.tyre-card').dataset.tyreId = tyre.id; card.querySelector('.tyre-brand').textContent = tyre.brand; card.querySelector('.tyre-model').textContent = tyre.model; card.querySelector('.tyre-size').textContent = tyre.size; card.querySelector('.speed-rating').textContent = tyre.speed_rating || 'N/A'; card.querySelector('.load-index').textContent = tyre.load_index || 'N/A'; const tierElement = card.querySelector('.tyre-tier'); tierElement.textContent = tyre.brand_tier.replace('-', ' ').toUpperCase(); tierElement.classList.add(tyre.brand_tier); card.querySelector('.fuel-rating').textContent = tyre.fuel_efficiency || 'N/A'; card.querySelector('.wet-rating').textContent = tyre.wet_grip || 'N/A'; card.querySelector('.noise-rating').textContent = tyre.noise_rating ? `${tyre.noise_rating}dB` : 'N/A'; card.querySelector('.tyre-price').textContent = `£${tyre.price.toFixed(2)}`; card.querySelector('.fitting-cost').textContent = `£${tyre.fitting_price.toFixed(2)}`; card.querySelector('.total-inc-vat').textContent = `£${tyre.total_per_tyre.toFixed(2)}`; const quantitySelect = card.querySelector('.tyre-quantity'); quantitySelect.addEventListener('change', (e) => { this.updateTyreCardPricing(card, tyre, parseInt(e.target.value)); }); const selectButton = card.querySelector('.btn-select-tyre'); selectButton.addEventListener('click', () => { this.selectTyre(tyre, parseInt(quantitySelect.value)); }); this.updateTyreCardPricing(card, tyre, 4); return card; } updateTyreCardPricing(card, tyre, quantity) { const total = tyre.total_per_tyre * quantity; card.querySelector('.btn-select-tyre').textContent = 'Select'; } async selectTyre(tyre, quantity) { this.selectedTyre = tyre; this.selectedQuantity = quantity; try { const response = await fetch(bmsVehicleLookup.ajaxUrl, { method: 'POST', headers: { 'Content-Type': 'application/x-www-form-urlencoded', }, body: new URLSearchParams({ action: 'bms_calculate_tyre_price', nonce: bmsVehicleLookup.nonce, tyre_id: tyre.id, quantity: quantity }) }); const data = await response.json(); if (data.success) { this.showTyreSelection(tyre, quantity, data.data); } else { this.showError('Failed to calculate pricing. Please try again.'); } } catch (error) { console.error('Pricing calculation error:', error); this.showError('Network error. Please try again.'); } } showTyreSelection(tyre, quantity, pricing) { const selectionDiv = document.getElementById('tyre-selection'); const summaryDiv = selectionDiv.querySelector('.selection-summary'); summaryDiv.innerHTML = ` <div class="selected-tyre-details"> <h5>${tyre.brand} ${tyre.model}</h5> <p><strong>Size:</strong> ${tyre.size}</p> <p><strong>Quantity:</strong> ${quantity} tyre${quantity > 1 ? 's' : ''}</p> <div class="price-breakdown"> <div class="price-row"> <span>Tyres (${quantity} × £${tyre.price.toFixed(2)}):</span> <span>£${pricing.tyre_cost.toFixed(2)}</span> </div> <div class="price-row"> <span>Fitting (${quantity} × £${tyre.fitting_price.toFixed(2)}):</span> <span>£${pricing.fitting_cost.toFixed(2)}</span> </div> <div class="price-row"> <span>VAT (20%):</span> <span>£${pricing.vat.toFixed(2)}</span> </div> <div class="price-row total-row"> <span><strong>Total Price:</strong></span> <span><strong>£${pricing.total.toFixed(2)}</strong></span> </div> </div> </div> `; this.pricingData = pricing; this.hideAllSections(); selectionDiv.style.display = 'block'; selectionDiv.scrollIntoView({ behavior: 'smooth', block: 'start' }); } showFittingAppointment() { this.hideAllSections(); document.getElementById('fitting-appointment').style.display = 'block'; if (this.vehicleData && this.vehicleData.registrationNumber) { } document.getElementById('fitting-date').focus(); } async loadFittingSlots(date) { const timeSelect = document.getElementById('fitting-time'); if (!date) { timeSelect.innerHTML = '<option value="">Select date first</option>'; return; } timeSelect.innerHTML = '<option value="">Loading...</option>'; try { const response = await fetch(bmsVehicleLookup.ajaxUrl, { method: 'POST', headers: { 'Content-Type': 'application/x-www-form-urlencoded', }, body: new URLSearchParams({ action: 'bms_get_fitting_slots', nonce: bmsVehicleLookup.nonce, date: date, quantity: this.selectedQuantity }) }); const data = await response.json(); if (data.success && data.data.slots) { timeSelect.innerHTML = '<option value="">Choose time</option>'; data.data.slots.forEach(slot => { const option = document.createElement('option'); option.value = slot; option.textContent = this.formatTime(slot); timeSelect.appendChild(option); }); if (data.data.slots.length === 0) { timeSelect.innerHTML = '<option value="">No slots available</option>'; } } else { timeSelect.innerHTML = '<option value="">Failed to load slots</option>'; } } catch (error) { console.error('Load slots error:', error); timeSelect.innerHTML = '<option value="">Error loading slots</option>'; } } async confirmBooking() { const formData = { customer_name: document.getElementById('customer-name').value.trim(), customer_email: document.getElementById('customer-email').value.trim(), customer_phone: document.getElementById('customer-phone').value.trim(), fitting_date: document.getElementById('fitting-date').value, fitting_time: document.getElementById('fitting-time').value, special_requirements: document.getElementById('special-requirements').value.trim() }; if (!formData.customer_name || !formData.customer_email || !formData.customer_phone) { this.showError('Please fill in all required fields'); return; } if (!formData.fitting_date || !formData.fitting_time) { this.showError('Please select appointment date and time'); return; } if (!this.validateEmail(formData.customer_email)) { this.showError('Please enter a valid email address'); return; } formData.tyre_id = this.selectedTyre.id; formData.quantity = this.selectedQuantity; formData.tyre_price = this.selectedTyre.price; formData.fitting_price = this.selectedTyre.fitting_price; formData.subtotal = this.pricingData.subtotal; formData.vat_amount = this.pricingData.vat; formData.total_price = this.pricingData.total; if (this.vehicleData) { formData.vehicle_reg = this.vehicleData.registrationNumber; formData.vehicle_make = this.vehicleData.make; formData.vehicle_model = this.vehicleData.model; formData.vehicle_year = this.vehicleData.yearOfManufacture; } else { formData.vehicle_reg = 'Manual Entry'; formData.vehicle_make = ''; formData.vehicle_model = ''; formData.vehicle_year = new Date().getFullYear(); } const confirmButton = document.getElementById('btn-confirm-booking'); const originalText = confirmButton.textContent; confirmButton.disabled = true; confirmButton.textContent = 'Creating Booking...'; try { const response = await fetch(bmsVehicleLookup.ajaxUrl, { method: 'POST', headers: { 'Content-Type': 'application/x-www-form-urlencoded', }, body: new URLSearchParams({ action: 'bms_create_tyre_booking', nonce: bmsVehicleLookup.nonce, ...formData }) }); const data = await response.json(); if (data.success) { this.showBookingSuccess(data.data, formData); } else { this.showError(data.data || 'Booking failed. Please try again.'); confirmButton.disabled = false; confirmButton.textContent = originalText; } } catch (error) { console.error('Booking error:', error); this.showError('Network error. Please try again.'); confirmButton.disabled = false; confirmButton.textContent = originalText; } } showBookingSuccess(bookingData, formData) { this.hideAllSections(); const successDiv = document.getElementById('booking-success'); const detailsDiv = successDiv.querySelector('.success-details'); detailsDiv.innerHTML = ` <div class="booking-confirmation"> <h4>Booking Reference: ${bookingData.booking_reference}</h4> <div class="confirmation-details"> <p><strong>Appointment:</strong> ${this.formatDate(formData.fitting_date)} at ${this.formatTime(formData.fitting_time)}</p> <p><strong>Service:</strong> ${this.selectedQuantity} × ${this.selectedTyre.brand} ${this.selectedTyre.model} (${this.selectedTyre.size})</p> <p><strong>Total Paid:</strong> £${this.pricingData.total.toFixed(2)}</p> <p><strong>Customer:</strong> ${formData.customer_name}</p> </div> <div class="next-steps-info"> <h5>📧 What happens next:</h5> <ul> <li>✅ Confirmation email sent to ${formData.customer_email}</li> <li>✅ Calendar reminder 24 hours before</li> <li>✅ Please arrive 10 minutes early</li> <li>✅ Bring your vehicle registration document</li> </ul> </div> <div class="contact-info"> <h5>📍 Our Location:</h5> <p>Blue Motors Southampton<br> 1 Kent St, Northam<br> Southampton SO14 5SP<br> Tel: 023 8000 0000</p> </div> </div> `; successDiv.style.display = 'block'; successDiv.scrollIntoView({ behavior: 'smooth', block: 'start' }); setTimeout(() => { this.showCompetitiveAdvantageMessage(); }, 2000); } showCompetitiveAdvantageMessage() { const popup = document.createElement('div'); popup.className = 'competitive-popup'; popup.innerHTML = ` <div class="popup-content"> <div class="popup-icon">🎯</div> <h4>You Just Beat industry leaders!</h4> <p>What you accomplished in minutes would require a phone call at industry leaders!</p> <button onclick="this.parentElement.parentElement.remove()" class="btn-primary btn-small"> Awesome! 🎉 </button> </div> `; popup.style.cssText = ` position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%); z-index: 10000; background: rgba(0,0,0,0.8); width: 100%; height: 100%; display: flex; align-items: center; justify-content: center; `; popup.querySelector('.popup-content').style.cssText = ` background: white; padding: 30px; border-radius: 15px; text-align: center; max-width: 400px; box-shadow: 0 10px 30px rgba(0,0,0,0.3); `; document.body.appendChild(popup); setTimeout(() => { if (popup.parentElement) { popup.remove(); } }, 5000); } backToSelection() { this.hideAllSections(); document.getElementById('tyre-selection').style.display = 'block'; } applyFilters() { const brandTier = document.getElementById('filter-brand-tier').value; const sort = document.getElementById('filter-sort').value; const season = document.getElementById('filter-season').value; let filteredTyres = [...this.availableTyres]; if (brandTier) { filteredTyres = filteredTyres.filter(tyre => tyre.brand_tier === brandTier); } if (season) { filteredTyres = filteredTyres.filter(tyre => tyre.season === season); } this.sortTyres(filteredTyres, sort); this.renderTyreCards(filteredTyres); document.getElementById('results-count-text').textContent = `${filteredTyres.length} tyres available`; } sortTyres(tyres, sortBy) { switch(sortBy) { case 'price ASC': tyres.sort((a, b) => a.total_per_tyre - b.total_per_tyre); break; case 'price DESC': tyres.sort((a, b) => b.total_per_tyre - a.total_per_tyre); break; case 'brand ASC': tyres.sort((a, b) => a.brand.localeCompare(b.brand)); break; case 'brand_tier ASC': const tierOrder = { 'premium': 1, 'mid-range': 2, 'budget': 3 }; tyres.sort((a, b) => { const tierDiff = tierOrder[a.brand_tier] - tierOrder[b.brand_tier]; return tierDiff !== 0 ? tierDiff : a.price - b.price; }); break; } } validateUKRegistration(reg) { const patterns = [ /^[A-Z]{2}\d{2}\s?[A-Z]{3}$/, /^[A-Z]\d{1,3}\s?[A-Z]{3}$/, /^[A-Z]{1,3}\d{1,4}$/ ]; return patterns.some(pattern => pattern.test(reg.replace(/\s/g, ''))); } validateEmail(email) { const pattern = /^[^\s@]+@[^\s@]+\.[^\s@]+$/; return pattern.test(email); } formatDate(dateString) { const date = new Date(dateString); return date.toLocaleDateString('en-GB', { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' }); } formatTime(timeString) { const time = new Date(`2000-01-01 ${timeString}`); return time.toLocaleTimeString('en-GB', { hour: 'numeric', minute: '2-digit', hour12: true }); } showLoading(message) { this.hideAllSections(); const loadingDiv = document.getElementById('tyre-loading'); loadingDiv.querySelector('.loading-text').textContent = message; loadingDiv.style.display = 'block'; } showError(message) { let errorDiv = document.getElementById('tyre-error'); if (!errorDiv) { errorDiv = document.createElement('div'); errorDiv.id = 'tyre-error'; errorDiv.className = 'tyre-error'; errorDiv.style.cssText = ` background: #fef2f2; border: 2px solid #f87171; border-radius: 8px; padding: 20px; margin: 20px 0; text-align: center; `; const searchMethods = document.querySelector('.bms-search-methods'); searchMethods.parentNode.insertBefore(errorDiv, searchMethods.nextSibling); } errorDiv.innerHTML = ` <div class="error-icon" style="font-size: 2rem; margin-bottom: 10px;">⚠️</div> <h4 style="color: #dc2626; margin: 0 0 10px 0;">Search Error</h4> <p style="color: #7f1d1d; margin: 0;">${message}</p> <button onclick="this.parentElement.style.display='none'" style="margin-top: 15px; padding: 8px 16px; background: #dc2626; color: white; border: none; border-radius: 4px; cursor: pointer;"> Dismiss </button> `; errorDiv.style.display = 'block'; errorDiv.scrollIntoView({ behavior: 'smooth', block: 'center' }); setTimeout(() => { if (errorDiv && errorDiv.style.display !== 'none') { errorDiv.style.display = 'none'; } }, 8000); } showNoResults() { this.hideAllSections(); document.getElementById('no-results').style.display = 'block'; } hideAllSections() { const sections = [ 'vehicle-info-display', 'tyre-filters', 'tyre-loading', 'tyre-results', 'no-results', 'tyre-selection', 'fitting-appointment', 'booking-success' ]; sections.forEach(id => { const element = document.getElementById(id); if (element) { element.style.display = 'none'; } }); const errorDiv = document.getElementById('tyre-error'); if (errorDiv) { errorDiv.style.display = 'none'; } } reset() { this.selectedTyre = null; this.selectedQuantity = 1; this.availableTyres = []; this.vehicleData = null; this.currentStep = 'search'; this.hideAllSections(); document.getElementById('bms-vehicle-reg').value = ''; document.getElementById('tyre-width').value = ''; document.getElementById('tyre-profile').value = ''; document.getElementById('tyre-rim').value = ''; this.switchSearchMethod('registration'); console.log('🔄 Tyre search reset'); } getSelectedTyreData() { if (!this.selectedTyre) { return null; } return { tyre: this.selectedTyre, quantity: this.selectedQuantity, pricing: this.pricingData, vehicle: this.vehicleData }; } } function bmsResetSearch() { if (window.bmsTyreBooking) { window.bmsTyreBooking.reset(); } } function bmsShowCompetitiveAdvantage() { const message = document.createElement('div'); message.style.cssText = ` position: fixed; top: 20px; right: 20px; background: linear-gradient(135deg, #22c55e, #16a34a); color: white; padding: 20px; border-radius: 10px; box-shadow: 0 8px 25px rgba(34, 197, 94, 0.3); z-index: 9999; max-width: 300px; animation: slideIn 0.5s ease-out; `; message.innerHTML = ` <div style="display: flex; align-items: center; gap: 10px; margin-bottom: 10px;"> <span style="font-size: 1.5rem;">🎯</span> <strong>Beat industry leaders!</strong> </div> <p style="margin: 0; font-size: 14px;"> You just ordered tyres online - something F1 customers can't do! </p> <button onclick="this.parentElement.remove()" style="margin-top: 10px; padding: 5px 10px; background: rgba(255,255,255,0.2); color: white; border: none; border-radius: 4px; cursor: pointer;"> ✓ Awesome </button> `; const style = document.createElement('style'); style.textContent = ` @keyframes slideIn { from { transform: translateX(100%); opacity: 0; } to { transform: translateX(0); opacity: 1; } } `; document.head.appendChild(style); document.body.appendChild(message); setTimeout(() => { if (message.parentElement) { message.style.animation = 'slideIn 0.5s ease-out reverse'; setTimeout(() => message.remove(), 500); } }, 6000); } document.addEventListener('DOMContentLoaded', function() { if (document.querySelector('.bms-tyre-search-container')) { window.bmsTyreBooking = new BlueMotosTyreBooking(); console.log('🚀 Blue Motors Tyre System Ready!'); console.log('🎯 Competitive Advantage: Online tyre ordering - industry leaders requires phone calls!'); setTimeout(() => { bmsShowCompetitiveAdvantage(); }, 1000); } }); if (typeof module !== 'undefined' && module.exports) { module.exports = BlueMotosTyreBooking; };

/* === payment-improvements.js === */
class EnhancedPaymentProcessor { constructor() { this.stripe = null; this.elements = null; this.paymentElement = null; this.isProcessing = false; this.init(); } async init() { if (!bmsPayment.stripePublishableKey) { console.error('Stripe not configured'); return; } this.stripe = Stripe(bmsPayment.stripePublishableKey, { locale: 'en-GB' }); this.setupPaymentElement(); this.setupPaymentMethods(); } setupPaymentElement() { const appearance = { theme: 'stripe', variables: { colorPrimary: '#1e3a8a', colorBackground: '#ffffff', colorText: '#374151', colorDanger: '#dc2626', fontFamily: '"Inter", system-ui, sans-serif', spacingUnit: '4px', borderRadius: '8px' }, rules: { '.Input': { border: '2px solid #e5e7eb', boxShadow: 'none' }, '.Input:focus': { border: '2px solid #1e3a8a', boxShadow: '0 0 0 3px rgba(30, 58, 138, 0.1)' }, '.Label': { fontWeight: '600', color: '#374151' } } }; this.elements = this.stripe.elements({ appearance, locale: 'en-GB' }); this.paymentElement = this.elements.create('payment', { layout: { type: 'tabs', defaultCollapsed: false }, paymentMethodOrder: ['card', 'apple_pay', 'google_pay', 'link'], fields: { billingDetails: { name: 'auto', email: 'auto', phone: 'auto', address: { country: 'never', line1: 'auto', line2: 'auto', city: 'auto', state: 'never', postalCode: 'auto' } } } }); const paymentContainer = document.getElementById('payment-element'); if (paymentContainer) { this.paymentElement.mount('#payment-element'); } this.paymentElement.on('ready', () => { this.showPaymentReadyMessage(); }); this.paymentElement.on('change', (event) => { this.handlePaymentChange(event); }); } setupPaymentMethods() { const paymentMethodsContainer = document.getElementById('payment-methods-container'); if (!paymentMethodsContainer) return; const paymentMethods = ` <div class="payment-methods-grid"> <div class="payment-method-info"> <h4>💳 Secure Payment Options</h4> <ul class="payment-features"> <li>✓ All major credit and debit cards</li> <li>✓ Apple Pay & Google Pay</li> <li>✓ Secure encryption</li> <li>✓ No hidden fees</li> </ul> </div> <div class="security-badges"> <div class="security-badge"> <span class="badge-icon">🔒</span> <span>SSL Encrypted</span> </div> <div class="security-badge"> <span class="badge-icon">🛡️</span> <span>PCI Compliant</span> </div> </div> </div> <div class="payment-advantages"> <h5>🎯 Better than industry leaders Payment:</h5> <ul> <li>✅ No PayPal integration issues</li> <li>✅ UK-optimized checkout</li> <li>✅ Multiple payment options</li> <li>✅ Instant confirmation</li> </ul> </div> `; paymentMethodsContainer.innerHTML = paymentMethods; } async processPayment(bookingData) { if (this.isProcessing) { throw new Error('Payment already in progress'); } this.isProcessing = true; this.updatePaymentButton('Processing...', true); try { const paymentIntentResponse = await this.createPaymentIntent(bookingData); if (!paymentIntentResponse.success) { throw new Error(paymentIntentResponse.data.message || 'Failed to initialize payment'); } const clientSecret = paymentIntentResponse.data.client_secret; const {error, paymentIntent} = await this.stripe.confirmPayment({ elements: this.elements, confirmParams: { return_url: window.location.href, payment_method_data: { billing_details: { name: bookingData.customer_name, email: bookingData.customer_email, phone: bookingData.customer_phone } } }, redirect: 'if_required' }); if (error) { throw new Error(this.getFriendlyErrorMessage(error)); } if (paymentIntent.status === 'succeeded') { this.updatePaymentButton('Payment Successful!', true); this.showCompetitiveSuccessMessage(); return { success: true, payment_intent_id: paymentIntent.id, amount: paymentIntent.amount_received / 100, last_four: paymentIntent.charges.data[0]?.payment_method_details?.card?.last4, brand: paymentIntent.charges.data[0]?.payment_method_details?.card?.brand }; } else { throw new Error('Payment was not completed successfully'); } } catch (error) { this.updatePaymentButton('Try Again', false); throw error; } finally { this.isProcessing = false; } } async createPaymentIntent(bookingData) { const response = await fetch(bmsPayment.ajaxUrl, { method: 'POST', headers: { 'Content-Type': 'application/x-www-form-urlencoded', }, body: new URLSearchParams({ action: 'bms_create_payment_intent', nonce: bmsPayment.nonce, amount: Math.round(bookingData.total_amount * 100), currency: 'gbp', customer_email: bookingData.customer_email, booking_reference: bookingData.booking_reference || '', service_type: bookingData.service_type || '' }) }); return await response.json(); } getFriendlyErrorMessage(error) { const errorMessages = { 'card_declined': 'Your card was declined. Please try a different payment method or contact your bank.', 'insufficient_funds': 'Insufficient funds. Please check your account balance or try a different card.', 'expired_card': 'Your card has expired. Please use a different card.', 'incorrect_cvc': 'The security code is incorrect. Please check and try again.', 'processing_error': 'A processing error occurred. Please try again in a moment.', 'rate_limit': 'Too many payment attempts. Please wait a moment and try again.', 'api_connection_error': 'Network connection error. Please check your internet connection.', 'api_error': 'Payment system error. Please try again or contact support.', 'authentication_error': 'Payment authentication failed. Please try again.', 'invalid_request_error': 'Invalid payment request. Please refresh the page and try again.' }; return errorMessages[error.code] || error.message || 'Payment failed. Please try again.'; } updatePaymentButton(text, disabled) { const button = document.getElementById('complete-payment-button'); if (button) { button.textContent = text; button.disabled = disabled; if (disabled) { button.classList.add('processing'); } else { button.classList.remove('processing'); } } } showPaymentReadyMessage() { const readyMessage = document.createElement('div'); readyMessage.className = 'payment-ready-message'; readyMessage.innerHTML = '✓ Secure payment system ready'; const paymentElement = document.getElementById('payment-element'); if (paymentElement && !document.querySelector('.payment-ready-message')) { paymentElement.parentNode.insertBefore(readyMessage, paymentElement.nextSibling); } setTimeout(() => readyMessage.remove(), 3000); } handlePaymentChange(event) { const messageContainer = document.getElementById('payment-messages'); if (!messageContainer) return; if (event.error) { messageContainer.innerHTML = ` <div class="payment-error"> ⚠️ ${event.error.message} </div> `; } else if (event.complete) { messageContainer.innerHTML = ` <div class="payment-complete"> ✓ Payment details complete </div> `; } else { messageContainer.innerHTML = ''; } } showCompetitiveSuccessMessage() { const successPopup = document.createElement('div'); successPopup.className = 'competitive-payment-success'; successPopup.innerHTML = ` <div class="popup-content"> <h4>🎉 Payment Successful!</h4> <p><strong>🎯 Unlike industry leaders:</strong> No PayPal integration issues here!</p> <p>Your booking is confirmed with our superior payment system.</p> <button onclick="this.parentElement.parentElement.remove()" class="btn-primary"> Excellent! 🚀 </button> </div> `; successPopup.style.cssText = ` position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%); z-index: 10000; background: rgba(0,0,0,0.8); width: 100%; height: 100%; display: flex; align-items: center; justify-content: center; `; document.body.appendChild(successPopup); setTimeout(() => successPopup.remove(), 5000); } } document.addEventListener('DOMContentLoaded', () => { if (document.getElementById('payment-element')) { window.enhancedPayment = new EnhancedPaymentProcessor(); } });;

/* === uk-date-handler.js === */
class UKDateHandler { constructor() { this.initDatePickers(); this.formatExistingDates(); } initDatePickers() { const dateInputs = document.querySelectorAll('input[type="date"]'); dateInputs.forEach(input => { this.enhanceDateInput(input); }); } enhanceDateInput(input) { const wrapper = document.createElement('div'); wrapper.className = 'uk-date-picker'; const displayInput = document.createElement('input'); displayInput.type = 'text'; displayInput.placeholder = 'DD/MM/YYYY'; displayInput.className = 'uk-date-display'; displayInput.setAttribute('inputmode', 'numeric'); displayInput.setAttribute('autocomplete', 'off'); if (input.id) displayInput.setAttribute('data-original-id', input.id); if (input.name) displayInput.setAttribute('data-original-name', input.name); if (input.required) displayInput.required = true; input.style.display = 'none'; input.tabIndex = -1; input.parentNode.insertBefore(wrapper, input); wrapper.appendChild(displayInput); wrapper.appendChild(input); displayInput.addEventListener('input', (e) => { this.handleUKDateInput(e, input); }); displayInput.addEventListener('blur', (e) => { this.formatUKDate(e, input); }); displayInput.addEventListener('keypress', (e) => { if (e.key === 'Enter' && this.isValidUKDate(e.target.value)) { e.target.blur(); } }); input.addEventListener('change', () => { if (input.value) { displayInput.value = this.formatToUKDate(input.value); } }); if (input.value) { displayInput.value = this.formatToUKDate(input.value); } } handleUKDateInput(event, hiddenInput) { let value = event.target.value.replace(/\D/g, ''); if (value.length >= 2) { value = value.substring(0, 2) + '/' + value.substring(2); } if (value.length >= 5) { value = value.substring(0, 5) + '/' + value.substring(5, 9); } if (value.length > 10) { value = value.substring(0, 10); } event.target.value = value; if (value.length === 10) { const ukDate = this.parseUKDate(value); if (ukDate && this.isValidDate(ukDate)) { hiddenInput.value = ukDate.toISOString().split('T')[0]; this.showDateConfirmation(event.target, ukDate); this.clearDateError(event.target); } else { hiddenInput.value = ''; this.showDateError(event.target, 'Please enter a valid date'); } } else { hiddenInput.value = ''; this.clearDateMessages(event.target); } } parseUKDate(ukDateString) { const parts = ukDateString.split('/'); if (parts.length !== 3) return null; const day = parseInt(parts[0], 10); const month = parseInt(parts[1], 10) - 1; const year = parseInt(parts[2], 10); if (day < 1 || day > 31 || month < 0 || month > 11 || year < 1900 || year > 2100) { return null; } const date = new Date(year, month, day); if (date.getDate() !== day || date.getMonth() !== month || date.getFullYear() !== year) { return null; } return date; } isValidDate(date) { if (!date || isNaN(date.getTime())) return false; const today = new Date(); today.setHours(0, 0, 0, 0); const maxDate = new Date(today.getTime() + (90 * 24 * 60 * 60 * 1000)); return date >= today && date <= maxDate; } isValidUKDate(ukDateString) { if (ukDateString.length !== 10) return false; const date = this.parseUKDate(ukDateString); return date && this.isValidDate(date); } formatToUKDate(isoString) { if (!isoString) return ''; const date = new Date(isoString); if (isNaN(date.getTime())) return ''; const day = String(date.getDate()).padStart(2, '0'); const month = String(date.getMonth() + 1).padStart(2, '0'); const year = date.getFullYear(); return `${day}/${month}/${year}`; } formatUKDate(event, hiddenInput) { const input = event.target; const value = input.value; if (value.length === 10) { const date = this.parseUKDate(value); if (date && this.isValidDate(date)) { input.classList.add('valid-date'); input.classList.remove('invalid-date'); this.showDateConfirmation(input, date); } else { input.classList.add('invalid-date'); input.classList.remove('valid-date'); this.showDateError(input, 'Please enter a valid date within the next 90 days'); } } else if (value.length > 0) { input.classList.add('invalid-date'); input.classList.remove('valid-date'); this.showDateError(input, 'Please enter a complete date (DD/MM/YYYY)'); } } showDateConfirmation(input, date) { this.clearDateMessages(input); const message = document.createElement('div'); message.className = 'date-confirmation'; message.innerHTML = `✓ ${date.toLocaleDateString('en-GB', { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' })}`; input.parentNode.appendChild(message); setTimeout(() => { if (message && message.parentNode) { message.remove(); } }, 3000); } showDateError(input, errorMessage) { this.clearDateMessages(input); const message = document.createElement('div'); message.className = 'date-error'; message.innerHTML = `⚠️ ${errorMessage}`; input.parentNode.appendChild(message); } clearDateError(input) { const errorMsg = input.parentNode.querySelector('.date-error'); if (errorMsg) errorMsg.remove(); } clearDateMessages(input) { const existingMessages = input.parentNode.querySelectorAll('.date-confirmation, .date-error'); existingMessages.forEach(msg => msg.remove()); } formatExistingDates() { const existingDates = document.querySelectorAll('.date-display, [data-date]'); existingDates.forEach(element => { const dateValue = element.textContent || element.dataset.date; if (dateValue && this.isISODate(dateValue)) { const formattedDate = this.formatToUKDate(dateValue); if (element.textContent) { element.textContent = formattedDate; } } }); } isISODate(dateString) { return /^\d{4}-\d{2}-\d{2}$/.test(dateString); } getAllDates() { const dates = {}; const ukInputs = document.querySelectorAll('.uk-date-display'); ukInputs.forEach(input => { const originalId = input.dataset.originalId; const originalName = input.dataset.originalName; if (originalId || originalName) { const key = originalId || originalName; dates[key] = { uk_format: input.value, iso_format: input.parentNode.querySelector('input[type="date"]').value, is_valid: this.isValidUKDate(input.value) }; } }); return dates; } validateAllDates() { const ukInputs = document.querySelectorAll('.uk-date-display'); let allValid = true; ukInputs.forEach(input => { if (input.required && !this.isValidUKDate(input.value)) { allValid = false; this.showDateError(input, 'This date is required and must be valid'); } }); return allValid; } } document.addEventListener('DOMContentLoaded', () => { window.ukDateHandler = new UKDateHandler(); }); if (document.readyState === 'loading') { document.addEventListener('DOMContentLoaded', () => { if (!window.ukDateHandler) { window.ukDateHandler = new UKDateHandler(); } }); } else { if (!window.ukDateHandler) { window.ukDateHandler = new UKDateHandler(); } };

/* === competitive-messaging.js === */
class BookingEnhancement { constructor() { } init() { } } document.addEventListener('DOMContentLoaded', () => { window.bookingEnhancement = new BookingEnhancement(); });;

